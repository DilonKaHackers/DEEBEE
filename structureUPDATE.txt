
class DataHolder {
private:
    vector <string> namesOfCollections;
    string ID = "NULL_ID";
    unordered_map<x, y> Data;
    string IDFilePath;
    map<int, unordered_map<x, y>> AllStatesOfData;
    bool begin = false;
    int commit_count = 1;

public:
    //Transaction functions
    void rollBack_full();
    void rollBackTransaction();
    void rollBackTransaction(int n);
    void beginTransaction();
    void commitTransaction();

    //DataHolder Constructors
    DataHolder(const string& name) : ID(name) {}
    DataHolder() = default;
    
    //Functions
 
    // Getters
    string getID() const;
    unordered_map<x, y> getData() const;
    void showCollectionNames();
    string getIDFilePath();
    bool checkBegin();

    //File Functions
    void exportData();
    void importData(const string &fileName);

    //Setters
    void addInCollectionVector(string& collectionName);
    void setData(unordered_map<x, y> MAP);
    void setID(string name);
    void removeFromCollectionVector(string& collectionName);
    void setIDFilePath(fs::path FilePath);
    void renameID(string newName);

    //Helper Functions
    bool checkKey(x& key);
    y getValue(x& key);
    void clearData();
    bool isEmpty();
    size_t countEntries()const;
    void writeData(const fs::path& filePath);
    string trimData(string& input);
    void setKeyValueToData(string& input);
    vector <x> extractKeys(unordered_map<x, y> theMap);
    void printData() const;

    //Major 
    void add_Key(const x& key);
    void add_KeyValue_pair(const x& key, const y& val);
    void add_multiple_KeyValue_pairs(const vector<x>& keys, const vector<y>& vals);
    void add_multiple_Keys(const vector<x>& keys);
    void remove_Key(const x& key);
    void remove_multiple_Keys(const vector<x>& keys);
    void update_key(const x& key, const y& val);
    void update_multiple_Keys(const vector<x>& keys, const vector<y>& vals);
    vector<x> searchByValue(const y& value);

};


class Collections {
private:
    string collection_name;
    unordered_map<string, DataHolder<x, y>> collectionMap;
    string collection_nameFilePath;

public:
    // Constructors
    Collections(const string& collectionName) : collection_name(collectionName) {}
    Collections() = default;

    //getter
    string getCollectionName();
    unordered_map<string, DataHolder<x, y>> &getCollectionMap();
    DataHolder<x, y> &getDataHolder(string nameOfDataHolder);
    string getcollection_nameFilePath();
    
    //setter
    void setCollectionMap(unordered_map<string, DataHolder<x, y>> newCollectionMap);
    void setCollectionName(string name);
    void setcollection_nameFilePath(fs::path FilePath);

    //Helper functions
    bool exists(string nameOfDataHolder);
    bool exists(DataHolder<x, y> theDataHolder);
    void renameCollection(const string& newCollectionName);
    void clearCollection();
    size_t count_total_entries();
    vector<pair<string, size_t>> entries_per_dataholder();
    void writeData(const fs::path& FilePath);
    void printCollection() const;

    //import,export
    void export_collection();
    void import_collection();

    //Major
    void add_to_collection(DataHolder<x, y>& dataHolder);
    void add_multiple_dataHolders(vector<DataHolder<x, y>*>& dataHolders);
    void remove_from_collection(DataHolder<x, y>& dataHolder);
    void remove_from_collection(const string& dataHolderName);
    void remove_multiple_dataHolders(const vector<string>& dataHolderNames);
    void remove_multiple_dataHolders(const vector<DataHolder<x, y>>& dataHolders);
    vector<DataHolder<x, y>> search_by_value_in_collection(const y& value);
    Collections<x, y> subset_collection(const vector<string>& dataHolderNames);

};


class DB {
private:
    unordered_map<string, shared_ptr<Collections<x, y>>> allCollections;

    //private Helpers
    void merge_multiple(vector<string> collectionNames, string newCollectionName);
    void merge_(string collectionName1, string collectionName2, string newCollectionName);

public:

    //Helper Functions
    bool check_collection_in_DB(string theCollectionName);
    bool check_collection_in_DB(Collections<x, y>& theCollection);
    shared_ptr<Collections<x, y>> get_collection_from_DB(const string& collectionName);
    void list_DB();

    //Major
    void add_to_DB(Collections<x,y> &theCollection);
    void remove_from_DB(Collections<x, y>& theCollection);
    void merge_collections(Collections<x, y> c1, Collections<x, y> c2, string nc);
    void merge_collections(string collectionName1, string collectionName2, string newCollectionName);
    void merge_multiple_collections(vector<Collections<x, y>> collections, string newCollectionName);
    void merge_multiple_collections(vector<string> collectionNames, string newCollectionName);
    void fetch_dataholder_Info_from_DB(const string& dataHolderName);
    void delete_dataHolder_from_DB(const string& dataHolderName);

};
