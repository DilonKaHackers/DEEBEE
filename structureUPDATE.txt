//DataHolder class

template<typename x, typename y>
class DataHolder {
private:
    vector <string> namesOfCollections;
    string ID = "NULL_ID";
    unordered_map<x, y> Data;

public:
    //DataHolder Constructors
    DataHolder(const string& name) : ID(name) {}
    DataHolder() = default;

    //DataHolder Functions
    // Getters

    string getID() const;
    unordered_map<x, y> getData() const;
    void showCollectionNames(); 
    bool checkKey(x& key); 
    y getValue(x& key);

    void addInCollectionVector(string& collectionName); 
    void removeFromCollectionVector(string& collectionName);
    //functions

    void add_Key(const x& key);
    void add_KeyValue_pair(const x& key, const y& val);
    void add_multiple_KeyValue_pairs(const vector<x>& keys, const vector<y>& vals);
    void add_multiple_Keys(const vector<x>& keys);
    void remove_Key(const x& key);
    void remove_multiple_Keys(const vector<x>& keys);
    void update_multiple_Keys(const vector<x>& keys, const vector<y>& vals);
    void update_key(const x& key, const y& val);
    void clearData();
    void printData();
};


//Collection class


template<typename x, typename y>
class Collections {
private:
    string collection_name = "NONE_COLLECTION_NAME";
    unordered_map<string, DataHolder<x, y>> collectionMap;

public:
    // Constructors
    Collections(const string& collectionName) : collection_name(collectionName) {}
    Collections() = default;

    //getter
    string getCollectionName() ;
    unordered_map<string, DataHolder<x, y>> getCollectionMap();
    DataHolder<x, y> getDataHolder(string nameOfDataHolder);    

    //Functions

    bool exists(string nameOfDataHolder);
    bool exists(DataHolder<x, y>& dataHolder);
    void add_to_collection(DataHolder<x, y>& dataHolder);
    void add_multiple_dataHolders(vector<DataHolder<x, y>*>& dataHolders);
    void remove_from_collection(DataHolder<x, y>& dataHolder);
    void remove_multiple_dataHolders(vector<DataHolder<x, y>*>& dataHolders)
    void printCollection() const;
    void renameCollection();
    void clearCollection();
};


//DB class

template <typename x, typename y>
class DB {

private:
	vector <Collections<x, y>> allCollections;
public:

        bool collectionExists(string collectionName);
	Collections<x,y> getCollection (string collectionName);

	void listDB();
	void add_to_DB(Collections<x, y>& collection); 
	void remove_from_DB(Collections<x, y>& collection);
	void remove_from_DB(string collectionName);

	void mergeCollections(string collection1, string collection2, string newCollection);

};
